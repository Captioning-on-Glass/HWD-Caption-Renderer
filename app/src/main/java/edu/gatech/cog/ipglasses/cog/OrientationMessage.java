// automatically generated by the FlatBuffers compiler, do not modify

package cog;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OrientationMessage extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static OrientationMessage getRootAsOrientationMessage(ByteBuffer _bb) { return getRootAsOrientationMessage(_bb, new OrientationMessage()); }
  public static OrientationMessage getRootAsOrientationMessage(ByteBuffer _bb, OrientationMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrientationMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float azimuth() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float pitch() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float roll() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float magX() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float magY() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float magZ() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float gyroX() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float gyroY() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float gyroZ() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createOrientationMessage(FlatBufferBuilder builder,
      float azimuth,
      float pitch,
      float roll,
      float magX,
      float magY,
      float magZ,
      float gyroX,
      float gyroY,
      float gyroZ) {
    builder.startTable(9);
    OrientationMessage.addGyroZ(builder, gyroZ);
    OrientationMessage.addGyroY(builder, gyroY);
    OrientationMessage.addGyroX(builder, gyroX);
    OrientationMessage.addMagZ(builder, magZ);
    OrientationMessage.addMagY(builder, magY);
    OrientationMessage.addMagX(builder, magX);
    OrientationMessage.addRoll(builder, roll);
    OrientationMessage.addPitch(builder, pitch);
    OrientationMessage.addAzimuth(builder, azimuth);
    return OrientationMessage.endOrientationMessage(builder);
  }

  public static void startOrientationMessage(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addAzimuth(FlatBufferBuilder builder, float azimuth) { builder.addFloat(0, azimuth, 0.0f); }
  public static void addPitch(FlatBufferBuilder builder, float pitch) { builder.addFloat(1, pitch, 0.0f); }
  public static void addRoll(FlatBufferBuilder builder, float roll) { builder.addFloat(2, roll, 0.0f); }
  public static void addMagX(FlatBufferBuilder builder, float magX) { builder.addFloat(3, magX, 0.0f); }
  public static void addMagY(FlatBufferBuilder builder, float magY) { builder.addFloat(4, magY, 0.0f); }
  public static void addMagZ(FlatBufferBuilder builder, float magZ) { builder.addFloat(5, magZ, 0.0f); }
  public static void addGyroX(FlatBufferBuilder builder, float gyroX) { builder.addFloat(6, gyroX, 0.0f); }
  public static void addGyroY(FlatBufferBuilder builder, float gyroY) { builder.addFloat(7, gyroY, 0.0f); }
  public static void addGyroZ(FlatBufferBuilder builder, float gyroZ) { builder.addFloat(8, gyroZ, 0.0f); }
  public static int endOrientationMessage(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOrientationMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedOrientationMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrientationMessage get(int j) { return get(new OrientationMessage(), j); }
    public OrientationMessage get(OrientationMessage obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

